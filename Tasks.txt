#Task №1
Написать прототип приложения "Список задач". Задача описывается состоянием (сделано/не сделано) и описанием того, что надо сделать. Ввод данных выполняется через консоль. Программа должна поддерживать 4 команды:
add - добавление задачи
print - печать списка задач
toggle - изменение статуса задачи
quit - завершение работы
На данном этапе программа должна хранить только одну задачу. Добавление новой задачи заменяет ту, которая в данный момент сохранена. Данные хранить в оперативной памяти. Необходимо предусмотреть обработку ошибок: неправильный формат ввода данных, некорректные аргументы команд
Для сборки использовать maven, репозиторий также должен содержать файл readme.md с описанием

Описание команд
add
Формат команды: add <описание задачи>
Описание задачи может содержать любые символы, кроме перевода строки. Перевод строки (нажатие клавиши Enter) означает завершение ввода описания задачи
print
Формат команды: print [all]
Выводит на печать список задач. По-умолчанию выводятся только невыполненные задачи, в случае если команда выполняется с аргументом all - печатаются все задачи. Печатаются следующие поля: идентификатор (номер, в данном случае всегда "1"), который используется в команде toggle, статус задачи (x - выполнена, " " - не выполнена), описание задачи.
Пример вывода:
1. [x] Реализовать сборку на maven
toggle
Формат команды: toggle <идентификатор задачи>
Переключает состояние задачи (с "выполнена" на "не выполнена" и наоборот) по идентификатору.
quit
Формат команды: quit
Завершает работу программы

#Task №2
Задание на разработку
Модифицировать приложение следующим образом:
В приложении должен храниться список задач.
Добавить команду delete для удаления задачи из списка.
Добавить команду edit для редактирования задачи.
Добавить команду search для поиска по подстроке.
На данном этапе программа должна хранить все задачи. Данные хранить в оперативной памяти.

#Task №3
Модифицировать приложение следующим образом:
Настроить maven, для работы с slf4j, logback/log4j2 - на выбор.
Модифицировать обработку одной из команд (например, toggle), чтобы при неправильном вводе нужно было обработать exception, записать в log информацию об исключительной ситуации.
Добавить логирование с уровнем debug, что бы понятно было, что получаем на вход (наш input) и что пишем на выход.
Обработку всех исключительных ситуаций логгировать с уровнем error.
Библиотеку логгирования сконфигурировать таким образом, чтобы логи записывались в файл log.txt
Дополнить описание сборки и запуска в readme.md
* Настроить библиотеку логгирования таким образом, чтобы при помощи аргументов запуска либо переменных окружения (на выбор)
можно было менять подробность логгирования (отключать вывод отладочной информации).
Способ настройки для запуска с отключенным/включенным подробным журналированием описать в readme.md